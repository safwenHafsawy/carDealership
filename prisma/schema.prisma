// schema.prisma

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
    directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

// required for nextAuth 
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Car {
    id            String  @id @default(uuid())
    model         String
    manufacturer  String
    pricePerHour  Float
    image         String
    technicalSpec String
    carRental     carRental[]

    @@map(name: "cars")
}

model carRental {
    id String @id @default(uuid())
    carId  String
    userId String
    startDate String
    endDate String
    totalPrice Int

    rentedBy User? @relation(fields: [userId], references: [id])
    rentedCar Car @relation(fields: [carId], references: [id])
}

model User {
    id          String   @id @default(uuid())
    name        String
    username    String   @unique
    email       String   @unique
    phoneNumber BigInt   
    password    String?
    image       String?
    createdAt   DateTime @default(now()) @map(name: "created_at")
    rentedCars  carRental[]
    sessions    Session[]
    accounts    Account[]
    Role        UserRole @default(USER)

    @@map(name: "users")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "sessions")
}

enum UserRole {
    USER
    ADMIN
}